// @flow

import EventEmitter from 'events';

export type StateListener = (string => any) | EventEmitter;
export type Listener = ((...args: any[]) => any) | EventEmitter;


declare export class State<R> extends EventEmitter {
    static EVENT_CHANGE_STATE: 'changeState';
    static STATE_ERROR: 'error';

    static isState(any): boolean; //%checks (it instanceof State);
    static create(Class: Function, copyStatic?: boolean): Class<State<R>>;
    static invoke<A, R>(fn: (...args: A) => R, args: ?A, thisArg?: any): R;

    isState: true;
    state: ?string;
    data: {[string]: any};
    keys: string[];
    stateData: any[];

    constructor(state: ?string): void;

    invoke<A, R>(fn: (...args: A) => R, args: ?A, thisArg?: any): R;
    destroy(recursive: ?boolean): this;
    is(state: string): boolean;
    setState(state: string, data: any): this;
    onState(state: string, listener: StateListener, thisArg?: any): this;
    onceState(state: string, listener: StateListener, thisArg?: any): this;
    onChangeState(listener: Listener, thisArg?: any): this;
    offChangeState(listener: Listener): this;
    setData(key: string, value: any): this;
    getData(key?: string): any;
    getStateData(key: string): any;
    toObject(keys?: string[]): Object;
    toJSON(): Object;
    setKeys(keys?: string[]): this;
}

declare export default class Response<R> extends State<R> {
    // Т.к. часто используется без отдельного импорта.
static State: Class<State<R>>;
static Queue: Class<Queue>;

static STATE_PENDING: 'pending';
static STATE_RESOLVED: 'resolve';
static STATE_REJECTED: 'error';
static EVENT_PROGRESS: 'progress';

static isResponse(any): boolean; //%checks (it instanceof Response);
static resolve(R: any): Response<R>;
static reject(R: any): Response<R>;

isResponse: true;

constructor(parent?: Response<any> | Promise<any>): void;

pending(): this;
resolve(any): this;
reject(any): this;
progress(any): this;
isPending(): boolean;
isResolved(): boolean;
isRejected(): boolean;

then(onResolve?: Listener, onReject?: Listener, onProgress?: Listener, thisArg?: any): this;
any(Listener, thisArg?: any): this;
onPending(Listener, thisArg?: any): this;
onResolve(Listener, thisArg?: any): this;
onReject(Listener, thisArg?: any): this;
onProgress(Listener, thisArg?: any): this;
notify(Response<any>): this;
listen(Response<any>): this;
done(): this;
fork(): Response<any>;
map(Listener, thisArg?: any): this;
getResult(string): any;
getReason(): any;
}

declare export class Queue extends Response<any> {
    static EVENT_START: 'start';
    static EVENT_STOP: 'stop';
    static EVENT_NEXT_ITEM: 'nextItem';
    static EVENT_ITEM_REJECTED: 'itemRejected';

    static isQueue(any): boolean; //%checks (it instanceof Queue);

    isQueue: true;
    items: any[];
    item: any;
    isStarted: boolean;
    isStrict: boolean;
    context: any;

    constructor(items: ?Queue[] | Promise<any>[] | Function[] | any[], start?: boolean): void;

    start(args?: any[]): this;
    stop(): this;
    push(item: Response<any> | Function, name: string): this;
    strict(flag?: boolean): this;
    onStart(Listener, thisArg?: any): this;
    onStop(Listener, thisArg?: any): this;
    onNextItem(Listener, thisArg?: any): this;
    onItemRejected(Listener, thisArg?: any): this;
    bind(thisArg?: any): this;
}
